name: Rust CI

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test (stable)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          components: clippy, rustfmt
      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
      - name: cargo fmt --check
        run: cargo fmt --all -- --check
      - name: cargo clippy
        run: cargo clippy --all-targets -- -D warnings
      - name: cargo build (default)
        run: cargo build --verbose
      - name: cargo build (dqn-gpu CPU)
        run: cargo build --no-default-features --features "dqn-gpu" --verbose
      - name: cargo test
        run: cargo test --all-targets --verbose

  matrix-test:
    name: Test (${{ matrix.toolchain }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        toolchain: [ stable, nightly ]
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          profile: minimal
          override: true
      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
      - name: cargo build (default)
        run: cargo build --verbose
      - name: cargo build (dqn-gpu CPU)
        run: cargo build --no-default-features --features "dqn-gpu" --verbose
      - name: cargo test
        run: cargo test --all-targets --verbose

  windows-release:
    name: Windows Build/Release (default + dqn)
    runs-on: windows-latest
    needs: [test]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install Rust (stable)
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
      - name: Build release (default)
        run: cargo build --release
      - name: Preserve default exe name
        shell: pwsh
        run: |
          $srcExe = "target/release/Snake-With-Q-Learning.exe"
          $srcPdb = "target/release/Snake-With-Q-Learning.pdb"
          if (Test-Path $srcExe) { Copy-Item $srcExe "target/release/snake-default.exe" -Force }
          if (Test-Path $srcPdb) { Copy-Item $srcPdb "target/release/snake-default.pdb" -Force }
      - name: Build release (DQN auto CUDA/CPU)
        run: .\build_dqn_windows.cmd release
      - name: Create GitHub Release (tagged)
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            target/release/snake-*.exe
            target/release/snake-*.pdb
          tag_name: ${{ github.ref_name }}
          name: Snake-With-Q-Learning ${{ github.ref_name }}
          draft: false
          prerelease: false
      - name: Create/Update rolling prerelease (latest)
        if: github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v2
        with:
          files: |
            target/release/snake-*.exe
            target/release/snake-*.pdb
          tag_name: latest
          target_commitish: ${{ github.sha }}
          name: Snake-With-Q-Learning latest
          draft: false
          prerelease: true
          make_latest: false
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: Snake-With-Q-Learning-windows-x86_64
          path: |
            target/release/snake-*.exe
            target/release/snake-*.pdb

  cut-release:
    name: Cut Release (bump version and tag)
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
      - name: Install cargo-edit
        run: cargo install cargo-edit --locked
      - name: Bump version (patch)
        run: |
          cargo set-version --bump patch
          NEW_VER=$(grep -m1 '^version\s*=\s*' Cargo.toml | sed -E 's/.*"([^"]+)".*/\1/')
          echo "NEW_VER=$NEW_VER" >> $GITHUB_ENV
      - name: Commit and tag
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git commit -am "chore: release v$NEW_VER"
          git tag "v$NEW_VER"
          git push origin HEAD:main --follow-tags
